commit e3204cf8f45e91e8de28dc30ed1ad6150fd546ff
Author: Michael Still <mikal@stillhq.com>

    libvirt: allow direct SPICE connections to qemu

    This patch adds a new console type, "spice-direct", which provides
    the connection information required to talk the native SPICE protocol
    directly to qemu on the hypervisor. This is intended to be fronted
    by a proxy which will handle authentication separately.

    A new microversion is introduced which adds the type "spice-direct"
    to the existing "spice" protocol.

    An example request:

    POST /servers/<uuid>/remote-consoles
    {
      "remote_console": {
        "protocol": "spice",
        "type": "spice-direct"
      }
    }

    An example response:

    {
      "remote_console": {
        "protocol": "spice",
        "type": "spice-direct",
        "url": "http://localhost:13200/nova?token=XXX"
      }
    }

    This token can then be used to lookup connection details for the
    console using a request like this:

    GET /os-console-auth-tokens/<consoletoken>

    Which returns something like this:

    {
      "console": {
        "instance_uuid": <uuid>,
        "host": <hypervisor>,
        "port": <a TCP port number>,
        "tls_port": <another TCP port number>,
        "internal_access_path": null
      }
    }

    APIImpact

    Change-Id: I1e701cbabc0e2c435685e31465159eec09e3b1a0

diff --git a/doc/api_samples/os-remote-consoles/v2.97/create-spice-direct-console-req.json b/doc/api_samples/os-remote-consoles/v2.97/create-spice-direct-console-req.json
new file mode 100644
index 0000000000..6a04d759fc
--- /dev/null
+++ b/doc/api_samples/os-remote-consoles/v2.97/create-spice-direct-console-req.json
@@ -0,0 +1,6 @@
+{
+    "remote_console": {
+        "protocol": "spice",
+        "type": "spice-direct"
+    }
+}
\ No newline at end of file
diff --git a/doc/api_samples/os-remote-consoles/v2.97/create-spice-direct-console-resp.json b/doc/api_samples/os-remote-consoles/v2.97/create-spice-direct-console-resp.json
new file mode 100644
index 0000000000..5bcac56fd1
--- /dev/null
+++ b/doc/api_samples/os-remote-consoles/v2.97/create-spice-direct-console-resp.json
@@ -0,0 +1,7 @@
+{
+    "remote_console": {
+        "protocol": "spice",
+        "type": "spice-direct",
+        "url": "http://127.0.0.1:13002/nova?token=aeabd4ec-3acb-4898-9130-10521ccbe5f3"
+    }
+}
diff --git a/doc/api_samples/versions/v21-version-get-resp.json b/doc/api_samples/versions/v21-version-get-resp.json
index e1b7acede1..197144bc28 100644
--- a/doc/api_samples/versions/v21-version-get-resp.json
+++ b/doc/api_samples/versions/v21-version-get-resp.json
@@ -19,7 +19,7 @@
             }
         ],
         "status": "CURRENT",
-        "version": "2.96",
+        "version": "2.97",
         "min_version": "2.1",
         "updated": "2013-07-23T11:33:21Z"
     }
diff --git a/doc/api_samples/versions/versions-get-resp.json b/doc/api_samples/versions/versions-get-resp.json
index d36325e9b6..cdb5504f3d 100644
--- a/doc/api_samples/versions/versions-get-resp.json
+++ b/doc/api_samples/versions/versions-get-resp.json
@@ -22,7 +22,7 @@
                 }
             ],
             "status": "CURRENT",
-            "version": "2.96",
+            "version": "2.97",
             "min_version": "2.1",
             "updated": "2013-07-23T11:33:21Z"
         }
diff --git a/nova/api/openstack/api_version_request.py b/nova/api/openstack/api_version_request.py
index 18355ae95b..9ec28a96ef 100644
--- a/nova/api/openstack/api_version_request.py
+++ b/nova/api/openstack/api_version_request.py
@@ -257,6 +257,7 @@ REST_API_VERSION_HISTORY = """REST API Version History:
     * 2.95 - Evacuate will now stop instance at destination.
     * 2.96 - Add support for returning pinned_availability_zone in
              ``server show`` and ``server list --long`` responses.
+    * 2.97 - Add the spice-direct console type to the spice console protocol.
 """

 # The minimum and maximum versions of the API supported
@@ -265,7 +266,7 @@ REST_API_VERSION_HISTORY = """REST API Version History:
 # Note(cyeoh): This only applies for the v2.1 API once microversions
 # support is fully merged. It does not affect the V2 API.
 _MIN_API_VERSION = '2.1'
-_MAX_API_VERSION = '2.96'
+_MAX_API_VERSION = '2.97'
 DEFAULT_API_VERSION = _MIN_API_VERSION

 # Almost all proxy APIs which are related to network, images and baremetal
diff --git a/nova/api/openstack/compute/console_auth_tokens.py b/nova/api/openstack/compute/console_auth_tokens.py
index eaff0edfbd..0d73ede03e 100644
--- a/nova/api/openstack/compute/console_auth_tokens.py
+++ b/nova/api/openstack/compute/console_auth_tokens.py
@@ -29,7 +29,7 @@ CONF = nova.conf.CONF

 class ConsoleAuthTokensController(wsgi.Controller):

-    def _show(self, req, id):
+    def _show(self, req, id, include_tls_port=False):
         """Checks a console auth token and returns the related connect info."""
         context = req.environ['nova.context']
         context.can(cat_policies.BASE_POLICY_NAME)
@@ -57,12 +57,19 @@ class ConsoleAuthTokensController(wsgi.Controller):
         if not connect_info:
             raise webob.exc.HTTPNotFound(explanation=_("Token not found"))

-        return {'console': {
-            'instance_uuid': connect_info.instance_uuid,
-            'host': connect_info.host,
-            'port': connect_info.port,
-            'internal_access_path': connect_info.internal_access_path,
-        }}
+        retval = {
+            'console': {
+                'instance_uuid': connect_info.instance_uuid,
+                'host': connect_info.host,
+                'port': connect_info.port,
+                'internal_access_path': connect_info.internal_access_path,
+            }
+        }
+
+        if connect_info.console_type == 'spice-direct' and include_tls_port:
+            retval['console']['tls_port'] = connect_info.tls_port
+
+        return retval

     @wsgi.Controller.api_version("2.1", "2.30")
     @wsgi.expected_errors((400, 401, 404))
@@ -78,8 +85,14 @@ class ConsoleAuthTokensController(wsgi.Controller):
         """
         raise webob.exc.HTTPBadRequest()

-    @wsgi.Controller.api_version("2.31")  # noqa
+    @wsgi.Controller.api_version("2.31", "2.96")  # noqa
+    @wsgi.expected_errors((400, 404))
+    @validation.query_schema(schema.show_query)
+    def show(self, req, id):  # noqa
+        return self._show(req, id, include_tls_port=False)
+
+    @wsgi.Controller.api_version("2.97")  # noqa
     @wsgi.expected_errors((400, 404))
     @validation.query_schema(schema.show_query)
     def show(self, req, id):  # noqa
-        return self._show(req, id)
+        return self._show(req, id, include_tls_port=True)
diff --git a/nova/api/openstack/compute/remote_consoles.py b/nova/api/openstack/compute/remote_consoles.py
index 08f87caa96..13fb09e4e3 100644
--- a/nova/api/openstack/compute/remote_consoles.py
+++ b/nova/api/openstack/compute/remote_consoles.py
@@ -72,12 +72,16 @@ class RemoteConsolesController(wsgi.Controller):
     @wsgi.expected_errors((400, 404, 409, 501))
     @wsgi.action('os-getSPICEConsole')
     @validation.schema(remote_consoles.get_spice_console)
+    @validation.schema(remote_consoles.get_spice_console_v297, "2.97")
     def get_spice_console(self, req, id, body):
         """Get text console output."""
         context = req.environ['nova.context']
         context.can(rc_policies.BASE_POLICY_NAME)

-        # If type is not supplied or unknown, get_spice_console below will cope
+        # NOTE(mikal): We support two types of SPICE console -- the traditional
+        # "spice-html5" console (the default), and a direct connection to qemu
+        # on the hypervisor ("spice-direct"). This second option is intended
+        # for use with a SPICE protocol proxy sitting in front of Nova.
         console_type = body['os-getSPICEConsole'].get('type')

         instance = common.get_instance(self.compute_api, context, id)
@@ -140,7 +144,8 @@ class RemoteConsolesController(wsgi.Controller):
     @wsgi.Controller.api_version("2.6")
     @wsgi.expected_errors((400, 404, 409, 501))
     @validation.schema(remote_consoles.create_v26, "2.6", "2.7")
-    @validation.schema(remote_consoles.create_v28, "2.8")
+    @validation.schema(remote_consoles.create_v28, "2.8", "2.96")
+    @validation.schema(remote_consoles.create_v297, "2.97")
     def create(self, req, server_id, body):
         context = req.environ['nova.context']
         instance = common.get_instance(self.compute_api, context, server_id)
diff --git a/nova/api/openstack/compute/rest_api_version_history.rst b/nova/api/openstack/compute/rest_api_version_history.rst
index fcfd5f95bf..18eb8671f8 100644
--- a/nova/api/openstack/compute/rest_api_version_history.rst
+++ b/nova/api/openstack/compute/rest_api_version_history.rst
@@ -1255,3 +1255,11 @@ behavior.

 The ``server show`` and ``server list --long`` responses now include the
 pinned availability zone as well.
+
+.. _microversion 2.97:
+
+2.97
+----
+
+Add the spice-direct console type to the spice console protocol. This includes
+adding a ``tls_port`` field to the return value from ``os-console-auth-token``.
diff --git a/nova/api/openstack/compute/schemas/remote_consoles.py b/nova/api/openstack/compute/schemas/remote_consoles.py
index 71d3cc403d..d39d7043c7 100644
--- a/nova/api/openstack/compute/schemas/remote_consoles.py
+++ b/nova/api/openstack/compute/schemas/remote_consoles.py
@@ -50,6 +50,25 @@ get_spice_console = {
     'additionalProperties': False,
 }

+get_spice_console_v297 = {
+    'type': 'object',
+    'properties': {
+        'os-getSPICEConsole': {
+            'type': 'object',
+            'properties': {
+                'type': {
+                    'type': 'string',
+                    'enum': ['spice-html5', 'spice-direct'],
+                },
+            },
+            'required': ['type'],
+            'additionalProperties': False,
+        },
+    },
+    'required': ['os-getSPICEConsole'],
+    'additionalProperties': False,
+}
+
 # NOTE(stephenfin): This schema is intentionally empty since the action has
 # been removed
 get_rdp_console = {}
@@ -119,3 +138,27 @@ create_v28 = {
     'required': ['remote_console'],
     'additionalProperties': False,
 }
+
+create_v297 = {
+    'type': 'object',
+    'properties': {
+        'remote_console': {
+            'type': 'object',
+            'properties': {
+                'protocol': {
+                    'type': 'string',
+                    'enum': ['vnc', 'spice', 'rdp', 'serial', 'mks'],
+                },
+                'type': {
+                    'type': 'string',
+                    'enum': ['novnc', 'xvpvnc', 'spice-html5', 'spice-direct',
+                             'serial', 'webmks'],
+                },
+            },
+            'required': ['protocol', 'type'],
+            'additionalProperties': False,
+        },
+    },
+    'required': ['remote_console'],
+    'additionalProperties': False,
+}
diff --git a/nova/compute/manager.py b/nova/compute/manager.py
index 0d169e7a4c..311e268f0a 100644
--- a/nova/compute/manager.py
+++ b/nova/compute/manager.py
@@ -7319,33 +7319,40 @@ class ComputeManager(manager.Manager):
         if not CONF.spice.enabled:
             raise exception.ConsoleTypeUnavailable(console_type=console_type)

-        if console_type != 'spice-html5':
+        if console_type not in ['spice-html5', 'spice-direct']:
             raise exception.ConsoleTypeInvalid(console_type=console_type)

         try:
             # Retrieve connect info from driver, and then decorate with our
             # access info token
             console = self.driver.get_spice_console(context, instance)
-            console_auth = objects.ConsoleAuthToken(
-                context=context,
-                console_type=console_type,
-                host=console.host,
-                port=console.port,
-                internal_access_path=console.internal_access_path,
-                instance_uuid=instance.uuid,
-                access_url_base=CONF.spice.html5proxy_base_url,
-            )
+            fields = {
+                'context': context,
+                'console_type': console_type,
+                'host': console.host,
+                'port': console.port,
+                'tls_port': console.tlsPort,
+                'instance_uuid': instance.uuid
+            }
+            if console_type == 'spice-html5':
+                fields['internal_access_path'] = console.internal_access_path
+                fields['access_url_base'] = CONF.spice.html5proxy_base_url
+            if console_type == 'spice-direct':
+                fields['internal_access_path'] = None
+                fields['access_url_base'] = \
+                    CONF.spice.spice_direct_proxy_base_url
+
+            console_auth = objects.ConsoleAuthToken(**fields)
             console_auth.authorize(CONF.consoleauth.token_ttl)
             connect_info = console.get_connection_info(
                 console_auth.token, console_auth.access_url)
+            return connect_info

         except exception.InstanceNotFound:
             if instance.vm_state != vm_states.BUILDING:
                 raise
             raise exception.InstanceNotReady(instance_id=instance.uuid)

-        return connect_info
-
     # TODO(gmann): HyperV virt driver has been removed in Nova 29.0.0
     # but we need to keep this method to avoid RPC error in case of using
     # old controller with new compute. This can be removed in RPC API 7.0
@@ -7456,7 +7463,7 @@ class ComputeManager(manager.Manager):
     @wrap_exception()
     @wrap_instance_fault
     def validate_console_port(self, ctxt, instance, port, console_type):
-        if console_type == "spice-html5":
+        if console_type in ["spice-html5", "spice-direct"]:
             console_info = self.driver.get_spice_console(ctxt, instance)
         elif console_type == "serial":
             console_info = self.driver.get_serial_console(ctxt, instance)
diff --git a/nova/conf/spice.py b/nova/conf/spice.py
index d01a83c3b9..2f7e6bce3a 100644
--- a/nova/conf/spice.py
+++ b/nova/conf/spice.py
@@ -161,6 +161,22 @@ Related options:
 * This option depends on ``html5proxy_host`` and ``html5proxy_port`` options.
   The access URL returned by the compute node must have the host
   and port where the ``nova-spicehtml5proxy`` service is listening.
+"""),
+    cfg.URIOpt('spice_direct_proxy_base_url',
+        default='http://127.0.0.1:13002/nova',
+        help="""
+Location of a SPICE protocol native console proxy.
+
+A user can retrieve a virt-viewer style .vv connection configuration file by
+accessing this URL with the attached token when a console is created.
+
+Possible values:
+
+* Must be a valid URL of the form:  ``http://host:port/nova`` where host is the
+  node running the SPICE protocol native proxy and the port is typically 13002.
+  Note that the port component is optional if you are using the default port
+  for HTTP or HTTPS. Consider not using the default value as it is not well
+  defined for any real deployment.
 """),
     cfg.StrOpt('server_listen',
         default='127.0.0.1',
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-remote-consoles/v2.97/create-spice-direct-console-req.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-remote-consoles/v2.97/create-spice-direct-console-req.json.tpl
new file mode 100644
index 0000000000..552ab30e15
--- /dev/null
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-remote-consoles/v2.97/create-spice-direct-console-req.json.tpl
@@ -0,0 +1,6 @@
+{
+    "remote_console": {
+        "protocol": "spice",
+        "type": "spice-direct"
+    }
+}
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-remote-consoles/v2.97/create-spice-direct-console-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-remote-consoles/v2.97/create-spice-direct-console-resp.json.tpl
new file mode 100644
index 0000000000..59fcbb083f
--- /dev/null
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-remote-consoles/v2.97/create-spice-direct-console-resp.json.tpl
@@ -0,0 +1,7 @@
+{
+    "remote_console": {
+        "protocol": "spice",
+        "type": "spice-direct",
+        "url": "http://127.0.0.1:13002/nova?token=%(uuid)s"
+    }
+}
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-remote-consoles/v2.97/get-spice-console-post-req.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-remote-consoles/v2.97/get-spice-console-post-req.json.tpl
new file mode 100644
index 0000000000..d04f7c7ae9
--- /dev/null
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-remote-consoles/v2.97/get-spice-console-post-req.json.tpl
@@ -0,0 +1,5 @@
+{
+    "os-getSPICEConsole": {
+        "type": "spice-html5"
+    }
+}
diff --git a/nova/tests/functional/api_sample_tests/test_remote_consoles.py b/nova/tests/functional/api_sample_tests/test_remote_consoles.py
index ae02ad3281..762891de24 100644
--- a/nova/tests/functional/api_sample_tests/test_remote_consoles.py
+++ b/nova/tests/functional/api_sample_tests/test_remote_consoles.py
@@ -125,3 +125,31 @@ class ConsolesV28SampleJsonTests(test_servers.ServersSampleBase):
                                  'create-mks-console-req', body)
         self._verify_response('create-mks-console-resp', {'url': HTTP_RE},
                               response, 200)
+
+
+class ConsolesV297SampleJsonTests(test_servers.ServersSampleBase):
+    sample_dir = "os-remote-consoles"
+    microversion = '2.97'
+    scenarios = [('v2_97', {'api_major_version': 'v2.1'})]
+
+    def setUp(self):
+        super(ConsolesV297SampleJsonTests, self).setUp()
+        self.flags(enabled=True, group='spice')
+
+    def test_create_spice_direct_console(self):
+        uuid = self._post_server()
+
+        body = {'protocol': 'spice', 'type': 'spice-direct'}
+        response = self._do_post('servers/%s/remote-consoles' % uuid,
+                                 'create-spice-direct-console-req', body)
+        self._verify_response(
+            'create-spice-direct-console-resp', {'url': HTTP_RE},
+            response, 200)
+
+    def test_get_spice_console(self):
+        uuid = self._post_server()
+        response = self._do_post('servers/%s/action' % uuid,
+                                 'get-spice-console-post-req',
+                                {'action': 'os-getSPICEConsole'})
+        self._verify_response('get-spice-console-post-resp', {'url': HTTP_RE},
+                              response, 200)
diff --git a/nova/tests/unit/api/openstack/compute/test_console_auth_tokens.py b/nova/tests/unit/api/openstack/compute/test_console_auth_tokens.py
index 8b8af21cc8..ac8dcbc8cc 100644
--- a/nova/tests/unit/api/openstack/compute/test_console_auth_tokens.py
+++ b/nova/tests/unit/api/openstack/compute/test_console_auth_tokens.py
@@ -30,11 +30,23 @@ from nova.tests.unit.api.openstack import fakes
 class ConsoleAuthTokensExtensionTestV21(test.NoDBTestCase):
     controller_class = console_auth_tokens_v21

-    _EXPECTED_OUTPUT = {'console': {'instance_uuid': fakes.FAKE_UUID,
-                                    'host': 'fake_host',
-                                    'port': '1234',
-                                    'internal_access_path':
-                                    'fake_access_path'}}
+    _EXPECTED_OUTPUT = {
+        'console': {
+            'instance_uuid': fakes.FAKE_UUID,
+            'host': 'fake_host',
+            'port': '1234',
+            'internal_access_path': 'fake_access_path'
+        }
+    }
+    _EXPECTED_OUTPUT_SPICE = {
+        'console': {
+            'instance_uuid': fakes.FAKE_UUID,
+            'host': 'fake_host',
+            'port': '5900',
+            'tls_port': '5901',
+            'internal_access_path': None
+        }
+    }

     # The database backend returns a ConsoleAuthToken.to_dict() and o.vo
     # StringField are unicode. And the port is an IntegerField.
@@ -43,6 +55,10 @@ class ConsoleAuthTokensExtensionTestV21(test.NoDBTestCase):
         {'host': u'fake_host', 'port': 1234,
          'internal_access_path': u'fake_access_path'})

+    _EXPECTED_OUTPUT_DB_SPICE = copy.deepcopy(_EXPECTED_OUTPUT_SPICE)
+    _EXPECTED_OUTPUT_DB_SPICE['console'].update(
+        {'host': u'fake_host', 'port': 5900, 'tls_port': 5901})
+
     def setUp(self):
         super(ConsoleAuthTokensExtensionTestV21, self).setUp()
         self.controller = self.controller_class.ConsoleAuthTokensController()
@@ -80,3 +96,38 @@ class ConsoleAuthTokensExtensionTestV231(ConsoleAuthTokensExtensionTestV21):
         self.assertRaises(webob.exc.HTTPNotFound,
                           self.controller.show, self.req, fakes.FAKE_UUID)
         mock_validate.assert_called_once_with(self.context, fakes.FAKE_UUID)
+
+
+class ConsoleAuthTokensExtensionTestV297(ConsoleAuthTokensExtensionTestV21):
+
+    def setUp(self):
+        super(ConsoleAuthTokensExtensionTestV297, self).setUp()
+        self.req.api_version_request = api_version_request.APIVersionRequest(
+            '2.97')
+
+    @mock.patch('nova.objects.ConsoleAuthToken.validate',
+                return_value = objects.ConsoleAuthToken(
+                    instance_uuid=fakes.FAKE_UUID, host='fake_host',
+                    port='1234', internal_access_path='fake_access_path',
+                    console_type='webmks', token=fakes.FAKE_UUID))
+    def test_get_console_connect_info(self, mock_validate):
+        output = self.controller.show(self.req, fakes.FAKE_UUID)
+        self.assertEqual(self._EXPECTED_OUTPUT_DB, output)
+        mock_validate.assert_called_once_with(self.context, fakes.FAKE_UUID)
+
+    @mock.patch('nova.objects.ConsoleAuthToken.validate',
+                return_value = objects.ConsoleAuthToken(
+                    instance_uuid=fakes.FAKE_UUID, host='fake_host',
+                    port='5900', tls_port='5901', internal_access_path=None,
+                    console_type='spice-direct', token=fakes.FAKE_UUID))
+    def test_get_console_connect_info_spice(self, mock_validate):
+        output = self.controller.show(self.req, fakes.FAKE_UUID)
+        self.assertEqual(self._EXPECTED_OUTPUT_DB_SPICE, output)
+        mock_validate.assert_called_once_with(self.context, fakes.FAKE_UUID)
+
+    @mock.patch('nova.objects.ConsoleAuthToken.validate',
+                side_effect=exception.InvalidToken(token='***'))
+    def test_get_console_connect_info_token_not_found(self, mock_validate):
+        self.assertRaises(webob.exc.HTTPNotFound,
+                          self.controller.show, self.req, fakes.FAKE_UUID)
+        mock_validate.assert_called_once_with(self.context, fakes.FAKE_UUID)
diff --git a/nova/tests/unit/api/openstack/compute/test_remote_consoles.py b/nova/tests/unit/api/openstack/compute/test_remote_consoles.py
index 35ea22343c..375116e52f 100644
--- a/nova/tests/unit/api/openstack/compute/test_remote_consoles.py
+++ b/nova/tests/unit/api/openstack/compute/test_remote_consoles.py
@@ -475,3 +475,35 @@ class ConsolesExtensionTestV28(ConsolesExtensionTestV26):
                                              'url': 'http://fake'}}, output)
         mock_handler.assert_called_once_with(self.context, self.instance,
                                              'webmks')
+
+
+class ConsolesExtensionTestV297(ConsolesExtensionTestV26):
+    def setUp(self):
+        super(ConsolesExtensionTestV297, self).setUp()
+        self.req = fakes.HTTPRequest.blank('')
+        self.context = self.req.environ['nova.context']
+        self.req.api_version_request = api_version_request.APIVersionRequest(
+            '2.97')
+        self.controller = console_v21.RemoteConsolesController()
+
+    def test_create_spice_direct_console(self):
+        mock_handler = mock.MagicMock()
+        mock_handler.return_value = {'url': 'http://fake'}
+        self.controller.handlers['spice'] = mock_handler
+
+        body = {
+            'remote_console': {
+                'protocol': 'spice',
+                'type': 'spice-direct'
+                }
+            }
+        output = self.controller.create(self.req, fakes.FAKE_UUID, body=body)
+        self.assertEqual({
+            'remote_console': {
+                'protocol': 'spice',
+                'type': 'spice-direct',
+                'url': 'http://fake'
+                }
+            }, output)
+        mock_handler.assert_called_once_with(self.context, self.instance,
+                                             'spice-direct')
diff --git a/releasenotes/notes/spice-direct-consoles-4bee40633633c971.yaml b/releasenotes/notes/spice-direct-consoles-4bee40633633c971.yaml
index 0149fa051d..b894343cdd 100644
--- a/releasenotes/notes/spice-direct-consoles-4bee40633633c971.yaml
+++ b/releasenotes/notes/spice-direct-consoles-4bee40633633c971.yaml
@@ -6,3 +6,15 @@ features:
     behavior, if set to true the SPICE consoles will require TLS
     protected connections. Unencrypted connections will be gracefully
     redirected to the TLS port via the SPICE protocol.
+  - |
+    This release adds a new console type, "spice-direct" which provides
+    the connection information required to talk the native SPICE
+    protocol directly to qemu on the hypervisor. This is intended to
+    be fronted by a proxy which will handle authentication separately.
+    This new console type is exposed in the Compute API v2.97
+    microversion. To facilitate this proxying, a new config option
+    spice_direct_proxy_base_url is added to the spice configuration group.
+    This option is used to construct a URL containing an access token for
+    the console, and that access token can be turned into hypervisor
+    connection information using the pre-existing
+    os-console-auth-tokens API.
