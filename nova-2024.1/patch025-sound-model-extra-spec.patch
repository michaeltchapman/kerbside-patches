commit cace49e07a53c76bad6f46944a7d6370b1b48ebd
Author: Michael Still <mikal@stillhq.com>
Date:   Mon Aug 26 10:05:16 2024 +1000

    libvirt: Add extra spec for sound device.

    This patch adds an extra spec to configure a sound device inside
    the guest. This is useful for SPICE consoles using the native
    protocol.

    Change-Id: I2faeda0fd0fb9c8894d69558a1ccaab8da9f6a1b

diff --git a/nova/api/validation/extra_specs/hw.py b/nova/api/validation/extra_specs/hw.py
index f707045..881dbbb 100644
--- a/nova/api/validation/extra_specs/hw.py
+++ b/nova/api/validation/extra_specs/hw.py
@@ -539,6 +539,19 @@ feature_flag_validators = [
             'description': 'Whether to enable packed virtqueue',
         },
     ),
+    base.ExtraSpecValidator(
+        name='hw:sound_model',
+        description=(
+            'The model of the attached sound device. '
+            'Only supported by the libvirt virt driver. '
+            'If unset, no sound device is attached.'
+        ),
+        value={
+            'type': str,
+            'description': 'A sound model',
+            'enum': fields.SoundModelType.ALL,
+        },
+    ),
 ]

 ephemeral_encryption_validators = [
diff --git a/nova/notifications/objects/image.py b/nova/notifications/objects/image.py
index f714632..5fd9b27 100644
--- a/nova/notifications/objects/image.py
+++ b/nova/notifications/objects/image.py
@@ -132,7 +132,8 @@ class ImageMetaPropsPayload(base.NotificationPayloadBase):
     # Version 1.12: Added 'hw_viommu_model' field
     # Version 1.13: Added 'hw_virtio_packed_ring' field
     # Version 1.14: Added 'hw_firmware_stateless' field
-    VERSION = '1.14'
+    # Version 1.15: Added 'hw_sound_model' field
+    VERSION = '1.15'

     # NOTE(efried): This logic currently relies on all of the fields of
     # ImageMetaProps being initialized with no arguments. See the docstring.
diff --git a/nova/objects/fields.py b/nova/objects/fields.py
index 332acf9..1171dcf 100644
--- a/nova/objects/fields.py
+++ b/nova/objects/fields.py
@@ -853,6 +853,20 @@ class PointerModelType(BaseNovaEnum):
     ALL = (USBTABLET,)


+class SoundModelType(BaseNovaEnum):
+
+    SB16 = 'sb16'
+    ES1370 = 'es1370'
+    PCSPK = 'pcspk'
+    AC97 = 'ac97'
+    ICH6 = 'ich6'
+    ICH9 = 'ich9'
+    USB = 'usb'
+    VIRTIO = 'virtio'
+
+    ALL = (SB16, ES1370, PCSPK, AC97, ICH6, ICH9, USB, VIRTIO,)
+
+
 class NotificationPriority(BaseNovaEnum):
     AUDIT = 'audit'
     CRITICAL = 'critical'
@@ -1389,6 +1403,10 @@ class PointerModelField(BaseEnumField):
     AUTO_TYPE = PointerModelType()


+class SoundModelField(BaseEnumField):
+    AUTO_TYPE = SoundModelType()
+
+
 class NotificationPriorityField(BaseEnumField):
     AUTO_TYPE = NotificationPriority()

diff --git a/nova/objects/image_meta.py b/nova/objects/image_meta.py
index 4c3589a..b28c1d6 100644
--- a/nova/objects/image_meta.py
+++ b/nova/objects/image_meta.py
@@ -197,14 +197,21 @@ class ImageMetaProps(base.NovaObject):
     #                     'hw_maxphysaddr_bits' field
     # Version 1.37: Added 'hw_ephemeral_encryption_secret_uuid' field
     # Version 1.38: Added 'hw_firmware_stateless' field
+    # Version 1.39: Added 'hw_sound_model' field
+
     # NOTE(efried): When bumping this version, the version of
     # ImageMetaPropsPayload must also be bumped. See its docstring for details.
-    VERSION = '1.38'
+    VERSION = '1.39'
+
+    # NOTE(mikal): This method is detected as being too complex by flake8 with
+    # error C901. We should think about ways to simplify this method.

-    def obj_make_compatible(self, primitive, target_version):
+    def obj_make_compatible(self, primitive, target_version):  # noqa: C901
         super(ImageMetaProps, self).obj_make_compatible(primitive,
                                                         target_version)
         target_version = versionutils.convert_version_to_tuple(target_version)
+        if target_version < (1, 39):
+            primitive.pop('hw_sound_model', None)
         if target_version < (1, 38):
             primitive.pop('hw_firmware_stateless', None)
         if target_version < (1, 37):
@@ -501,6 +508,9 @@ class ImageMetaProps(base.NovaObject):
         # Control bits for the physical memory address bit of Libvirt guests.
         'hw_maxphysaddr_bits': fields.IntegerField(),

+        # Name of sound device model to use.
+        'hw_sound_model': fields.SoundModelField(),
+
         # if true download using bittorrent
         'img_bittorrent': fields.FlexibleBooleanField(),

diff --git a/nova/tests/unit/notifications/objects/test_notification.py b/nova/tests/unit/notifications/objects/test_notification.py
index 9f6dfde..2e74e7d 100644
--- a/nova/tests/unit/notifications/objects/test_notification.py
+++ b/nova/tests/unit/notifications/objects/test_notification.py
@@ -386,7 +386,7 @@ notification_object_data = {
     # ImageMetaProps, so when you see a fail here for that reason, you must
     # *also* bump the version of ImageMetaPropsPayload. See its docstring for
     # more information.
-    'ImageMetaPropsPayload': '1.14-83e634a9474c038df50a41c47e0ee081',
+    'ImageMetaPropsPayload': '1.15-0bcf1661937f7f682eaf8b833c4ce99b',
     'InstanceActionNotification': '1.0-a73147b93b520ff0061865849d3dfa56',
     'InstanceActionPayload': '1.8-4fa3da9cbf0761f1f700ae578f36dc2f',
     'InstanceActionRebuildNotification':
diff --git a/nova/tests/unit/objects/test_image_meta.py b/nova/tests/unit/objects/test_image_meta.py
index 2b86c19..54a77c1 100644
--- a/nova/tests/unit/objects/test_image_meta.py
+++ b/nova/tests/unit/objects/test_image_meta.py
@@ -551,6 +551,17 @@ class TestImageMetaProps(test.NoDBTestCase):
         self.assertNotIn('hw_tpm_model', primitive['nova_object.data'])
         self.assertNotIn('hw_tpm_version', primitive['nova_object.data'])

+    def test_obj_make_compatible_sound_model(self):
+        """Test that checks if we pop hw_sound_model."""
+        obj = objects.ImageMetaProps(
+            hw_sound_model='sb16',
+        )
+        primitive = obj.obj_to_primitive()
+        self.assertIn('hw_sound_model', primitive['nova_object.data'])
+
+        primitive = obj.obj_to_primitive('1.27')
+        self.assertNotIn('hw_sound_model', primitive['nova_object.data'])
+
     def test_obj_make_compatible_socket_policy(self):
         obj = objects.ImageMetaProps(
             hw_pci_numa_affinity_policy=fields.PCINUMAAffinityPolicy.SOCKET)
diff --git a/nova/tests/unit/objects/test_objects.py b/nova/tests/unit/objects/test_objects.py
index a366b2f..9e9280d 100644
--- a/nova/tests/unit/objects/test_objects.py
+++ b/nova/tests/unit/objects/test_objects.py
@@ -1105,7 +1105,7 @@ object_data = {
     'HyperVLiveMigrateData': '1.4-e265780e6acfa631476c8170e8d6fce0',
     'IDEDeviceBus': '1.0-29d4c9f27ac44197f01b6ac1b7e16502',
     'ImageMeta': '1.8-642d1b2eb3e880a367f37d72dd76162d',
-    'ImageMetaProps': '1.38-1f4f4f1b60413aa543e446d716cfbc20',
+    'ImageMetaProps': '1.39-3e49d23fb404b61c8d530cff5cc88da2',
     'Instance': '2.8-2727dba5e4a078e6cc848c1f94f7eb24',
     'InstanceAction': '1.2-9a5abc87fdd3af46f45731960651efb5',
     'InstanceActionEvent': '1.4-5b1f361bd81989f8bb2c20bb7e8a4cb4',
diff --git a/nova/tests/unit/virt/libvirt/test_driver.py b/nova/tests/unit/virt/libvirt/test_driver.py
index baadf6c..30ce809 100644
--- a/nova/tests/unit/virt/libvirt/test_driver.py
+++ b/nova/tests/unit/virt/libvirt/test_driver.py
@@ -6946,6 +6946,43 @@ class LibvirtConnTestCase(test.NoDBTestCase,
         self.assertEqual(cfg.devices[7].model, 'tpm-crb')
         self.assertEqual(cfg.devices[7].secret_uuid, uuids.vtpm)

+    def test_get_guest_config_with_sound_model(self):
+        self.flags(virt_type='kvm', group='libvirt')
+
+        drvr = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), True)
+        instance = objects.Instance(**self.test_instance)
+        image_meta = objects.ImageMeta.from_dict({
+            'disk_format': 'raw',
+            'properties': {
+                'hw_sound_model': 'sb16',
+            },
+        })
+
+        disk_info = blockinfo.get_disk_info(
+            CONF.libvirt.virt_type, instance, image_meta)
+        cfg = drvr._get_guest_config(instance, [], image_meta, disk_info)
+        self.assertEqual(10, len(cfg.devices))
+        self.assertIsInstance(
+            cfg.devices[0], vconfig.LibvirtConfigGuestDisk)
+        self.assertIsInstance(
+            cfg.devices[1], vconfig.LibvirtConfigGuestDisk)
+        self.assertIsInstance(
+            cfg.devices[2], vconfig.LibvirtConfigGuestSerial)
+        self.assertIsInstance(
+            cfg.devices[3], vconfig.LibvirtConfigGuestSound)
+        self.assertIsInstance(
+            cfg.devices[4], vconfig.LibvirtConfigGuestGraphics)
+        self.assertIsInstance(
+            cfg.devices[5], vconfig.LibvirtConfigGuestVideo)
+        self.assertIsInstance(
+            cfg.devices[6], vconfig.LibvirtConfigGuestInput)
+        self.assertIsInstance(
+            cfg.devices[7], vconfig.LibvirtConfigGuestRng)
+        self.assertIsInstance(
+            cfg.devices[8], vconfig.LibvirtConfigGuestUSBHostController)
+        self.assertIsInstance(
+            cfg.devices[9], vconfig.LibvirtConfigMemoryBalloon)
+
     def test_get_guest_config_with_video_driver_vram(self):
         self.flags(enabled=False, group='vnc')
         self.flags(virt_type='kvm', group='libvirt')
diff --git a/nova/virt/hardware.py b/nova/virt/hardware.py
index a9ce540..b294d9c 100644
--- a/nova/virt/hardware.py
+++ b/nova/virt/hardware.py
@@ -2839,3 +2839,27 @@ def get_ephemeral_encryption_format(
             )
         return eph_format
     return None
+
+
+def get_sound_model(
+    flavor: 'objects.Flavor',
+    image_meta: 'objects.ImageMeta',
+) -> ty.Optional[str]:
+    """Get the sound device model, if any.
+
+    :param flavor: ``nova.objects.Flavor`` instance
+    :param image_meta: ``nova.objects.ImageMeta`` instance
+    :raises: nova.exception.FlavorImageConflict if a value is specified in both
+        the flavor and the image, but the values do not match
+    :raises: nova.exception.Invalid if a value or combination of values is
+        invalid
+    :returns: A string containing the device model, else None.
+    """
+    model = _get_unique_flavor_image_meta('sound_model', flavor, image_meta)
+    if model and model not in fields.SoundModelType.ALL:
+        raise exception.Invalid(
+            "Invalid sound device model %(model)r. Allowed values: %(valid)s."
+            % {'model': model, 'valid': ', '.join(fields.SoundModelType.ALL)}
+        )
+
+    return model
diff --git a/nova/virt/libvirt/config.py b/nova/virt/libvirt/config.py
index 9bde7e6..80826b7 100644
--- a/nova/virt/libvirt/config.py
+++ b/nova/virt/libvirt/config.py
@@ -3958,3 +3958,15 @@ class LibvirtConfigGuestMetaNovaIp(LibvirtConfigObject):
         meta.set("address", str(self.address))
         meta.set("ipVersion", str(self.ip_version))
         return meta
+
+
+class LibvirtConfigGuestSound(LibvirtConfigObject):
+
+    def __init__(self, model):
+        super(LibvirtConfigGuestSound, self).__init__(root_name='sound')
+        self.model = model
+
+    def format_dom(self):
+        meta = self._new_node('sound')
+        meta.set('model', str(self.model))
+        return meta
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index 335d1dc..3a0fffa 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -6677,6 +6677,22 @@ class LibvirtDriver(driver.ComputeDriver):
         vtpm = vconfig.LibvirtConfigGuestVTPM(vtpm_config, vtpm_secret_uuid)
         guest.add_device(vtpm)

+    def _add_sound_device(
+        self,
+        guest: vconfig.LibvirtConfigGuest,
+        flavor: 'objects.Flavor',
+        instance: 'objects.Instance',
+        image_meta: 'objects.ImageMeta',
+    ) -> None:
+        """Add a sound device to the guest, if requested."""
+        # Enable sound support if required in the flavor or image.
+        sound_model = hardware.get_sound_model(flavor, image_meta)
+        if not sound_model:
+            return None
+
+        sound_device = vconfig.LibvirtConfigGuestSound(sound_model)
+        guest.add_device(sound_device)
+
     def _set_qemu_guest_agent(self, guest, flavor, instance, image_meta):
         # Enable qga only if the 'hw_qemu_guest_agent' is equal to yes
         if image_meta.properties.get('hw_qemu_guest_agent', False):
@@ -7352,6 +7368,7 @@ class LibvirtDriver(driver.ComputeDriver):
         self._create_consoles(guest, instance, flavor, image_meta)

         self._guest_add_spice_channel(guest)
+        self._add_sound_device(guest, flavor, instance, image_meta)

         if self._guest_add_video_device(guest):
             self._add_video_driver(guest, image_meta, flavor)

diff --git a/doc/notification_samples/common_payloads/ImageMetaPropsPayload.json b/doc/notification_samples/common_payloads/ImageMetaPropsPayload.json
index eb100b7..cc05522 100644
--- a/doc/notification_samples/common_payloads/ImageMetaPropsPayload.json
+++ b/doc/notification_samples/common_payloads/ImageMetaPropsPayload.json
@@ -4,5 +4,5 @@
         "hw_architecture": "x86_64"
     },
     "nova_object.name": "ImageMetaPropsPayload",
-    "nova_object.version": "1.14"
+    "nova_object.version": "1.15"
 }
